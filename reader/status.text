What is done:

  The main reader algorithm exists. 

  There are reader macros for single quote, double quote, 
  semicolon, left parenthesis, right parenthesis, sharp-quote. 

  There is probably a bug in the way the consing dot is handled. 

How to test it:

  Currently the test file has no tests in it. 

  1. Make sure you have lisp-unit in your image.  The easiest way
     of doing that is to have SICL/Lisp-Unit/ in your 
     asdf:*central-registry* and then do an 
     (asdf:operate 'asdf:load-op :lisp-unit)

  2. Run (asdf:operate 'asdf:load-op :sicl-read-test).

  3. Do (in-package #:sicl-read-test).

  4. Do a (run-tests)

What remains to to:

  Define more tests.  

  Backquote, comma, comma at-sign.  The standard recommends that
  these be implemented in a way similar to the way it is done in 
  Scheme, i.e. instead of generating LIST, APPEND etc, it should
  generate MYLIST, MYAPPEND, etc, in order that the print function
  can print such expressions using backquote, comma, etc.  I think
  it is rare to want to print such expressions, so it would be
  entirely acceptable to write an initial implementation that
  uses LIST, APPEND, etc.

  Reader macro for #.  It should read an optional decimal number, and
  then dispatch on the following character.  

  Reader macros for most of the dispatching macro functions: such as
  `#(', `#A', `#*', `#x', etc. 

  Building a token from a string.  This is relatively easy for
  integers and symbols, and somewhat harder for floating-point
  numbers (see the references for an article describing how to read
  a floating point number accurately). 

  Fix the way in which the consing dot is handled. 
