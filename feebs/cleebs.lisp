(in-package :clicl-feebs)

(defparameter *shadow-feebs-symbols*
  '(
    (feebs:make-feeb :box-out)
    (feebs:*active-feeb* :ignore)
    (feebs:feeb-name :shadow)
    (feebs:coordinates :shadow)
    (feebs:planet-name :shadow)
    (feebs:feeb-peeking :shadow)
    (feebs:feeb-energy :shadow)
    (feebs:line-of-sight :shadow)
    (feebs:feeb-score :shadow)
    (feebs:feeb-kills :shadow)
    (feebs:feeb-last-move :shadow)
    (feebs:move-aborted-p :shadow)
    (feebs:ready-to-fire-p :shadow)
    (feebs:current-square :shadow)
    (feebs:rear-square :shadow)
    (feebs:left-square :shadow)
    (feebs:right-square :shadow)
    (feebs:vision-ahead :shadow)
    (feebs:vision-right :shadow)
    (feebs:vision-left :shadow)
    (feebs:get-parm :shadow)
    (feebs:set-parm :shadow)
    (feebs:feeb-image-p :shadow)
    (feebs:feeb-image-name :shadow)
    (feebs:feeb-image-heading :shadow)
    (feebs:fireball-image-p :shadow)
    (feebs:fireball-image-shooter :shadow)
    (feebs:fireball-image-direction :shadow)
    (feebs:print-maze :shadow)
    (feebs:print-scoreboard :shadow)
    (feebs:test-feeb-brain :shadow)
    (feebs:list-parameter-settings :shadow)
    (feebs:move :shadow)
    (feebs:play-cycle :shadow)
    (feebs:play-game :shadow)
    (feebs:play-restart :shadow)
    (feebs:maze-layouts :shadow)
    (feebs:change-maze-layout :shadow)
    (feebs:planet-list :shadow)
    (feebs:planet-feebs :shadow)
    (feebs:planet-create :shadow)
    (feebs:planet-join :shadow)
    (feebs:planet-leave :shadow)
    (feebs:publish-brain  :shadow)))

(clicl::def-clicl-system :feebs '(:feebs) *shadow-feebs-symbols*)

(defun publish-feeb-brain (feeb brain)
  (setf (feebs-base::feeb-brain feeb)
        (let ((feebs::*active-feeb* feeb))
          (lambda ()
            (funcall brain)))))

(defun create-feeb (name)
  (let ((box (make-sandbox name))
        (feeb (feebs:make-feeb name)))
    (clicl::load-system* box :feebs )
    (crate:with-crate ((clicl::sandbox-crate box))
      (crate:use-package :feebs))
    (setf (feebs-base::feeb-lisp-env feeb)
          box)
    (publish-feeb-brain feeb (lambda ()
            :wait))
    (setf (feebs-base::feeb-publish feeb)
          #'publish-feeb-brain)
    feeb))


(defun feeb-repl (feeb)
  (let ((feebs::*active-feeb* feeb))
    (clicl:repl (feebs-base::feeb-lisp-env feeb))))

(defun load-file (feeb file)
  (clicl:load-file (feebs-base::feeb-lisp-env feeb) file))
